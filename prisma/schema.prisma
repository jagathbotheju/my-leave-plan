// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?       @unique
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           Role          @default(USER)
  accounts       Account[]
  sessions       Session[]
  leaveBalance   LeaveBalance?
  leave          Leave[]
}

model Leave {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  year        String
  startDate   DateTime
  endDate     DateTime
  days        Int
  leaveType   LeaveType
  leaveStatus LeaveStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LeaveBalance {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  year          String
  annual        Int    @default(0)
  annualForward Int    @default(0)
  casual        Int    @default(0)
  sick          Int    @default(0)
  userId        String @unique @db.ObjectId
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum LeaveStatus {
  APPROVED
  PENDING
  REJECTED
  UNKNOWN
}

enum LeaveType {
  ANNUAL
  CASUAL
  SICK
  ANNUAL_FORWARD
  UNKNOWN
}

enum Role {
  USER
  ADMIN
}
